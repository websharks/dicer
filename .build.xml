<?xml version="1.0" encoding="UTF-8" ?>

<project name="PHP PSR-4 Project" default="build">

  <!-- ============================================  -->
  <!-- Configuration. -->
  <!-- ============================================  -->

  <!-- Property values. -->

  <property file="${project.basedir}/.build.properties" />

  <!-- Codex ignore list. -->

  <property name="_codex_ignore" value="*/assets/*,*/tests/*,*/vendor/*" />

  <!-- Fileset reference for PHAR files. -->

  <fileset id="_phar_fileset" dir="${project.basedir}" casesensitive="false">
    <exclude name="phar-stub.php" />
    <exclude name="**/phar-stub.php" />

    <exclude name=".**" />
    <exclude name="**/.~**" />
    <exclude name="**/.ht*" />
    <exclude name="**/.git**" />
    <exclude name="**/.idea/**" />
    <exclude name="**/.tags" />
    <exclude name="**/.post-receive" />
    <exclude name="**/.apigen.neon" />
    <exclude name="**/.travis.yml" />
    <exclude name="**/.coveralls.yml" />
    <exclude name="**/.scrutinizer.yml" />
    <exclude name="**/.build.properties" />
    <exclude name="**/.build-*.xml" />
    <exclude name="**/.build.xml" />

    <exclude name="assets/**" />
    <exclude name="tests/**" />

    <exclude name="composer.json" />
    <exclude name="composer.lock" />
    <exclude name="**/composer.json" />
    <exclude name="**/composer.lock" />

    <exclude name="license.txt" />
    <exclude name="license.md" />
    <exclude name="**/license.txt" />
    <exclude name="**/license.md" />

    <exclude name="readme.txt" />
    <exclude name="readme.md" />
    <exclude name="**/readme.txt" />
    <exclude name="**/readme.md" />

    <exclude name="changelog.txt" />
    <exclude name="changelog.md" />
    <exclude name="**/changelog.txt" />
    <exclude name="**/changelog.md" />

    <exclude name="authors.txt" />
    <exclude name="authors.md" />
    <exclude name="**/authors.txt" />
    <exclude name="**/authors.md" />

    <exclude name="contributors.txt" />
    <exclude name="contributors.md" />
    <exclude name="**/contributors.txt" />
    <exclude name="**/contributors.md" />

    <exclude name="vendor/bin/**" />
    <exclude name="**/vendor/bin/**" />
  </fileset>

  <!-- Fileset reference for ZIP/TGZ files. -->

  <fileset id="_zip_tgz_fileset" dir="${project.basedir}" casesensitive="false">
    <exclude name="phar-stub.php" />
    <exclude name="**/phar-stub.php" />

    <exclude name=".**" />
    <exclude name="**/.~**" />
    <exclude name="**/.ht*" />
    <exclude name="**/.git**" />
    <exclude name="**/.idea/**" />
    <exclude name="**/.tags" />
    <exclude name="**/.post-receive" />
    <exclude name="**/.apigen.neon" />
    <exclude name="**/.travis.yml" />
    <exclude name="**/.coveralls.yml" />
    <exclude name="**/.scrutinizer.yml" />
    <exclude name="**/.build.properties" />
    <exclude name="**/.build-*.xml" />
    <exclude name="**/.build.xml" />

    <exclude name="assets/**" />
    <exclude name="tests/**" />

    <exclude name="composer.json" />
    <exclude name="composer.lock" />
    <exclude name="**/composer.json" />
    <exclude name="**/composer.lock" />

    <exclude name="vendor/bin/**" />
    <exclude name="**/vendor/bin/**" />
  </fileset>

  <!-- Property replacement codes. -->

  <tstamp><format property="_time_ymd" pattern="%y%m%d" /></tstamp>
  <php expression="str_replace('%y%m%d', date('ymd'), '${project_version}')" returnproperty="project_version" />

  <!-- ============================================  -->
  <!-- Property validation. -->
  <!-- ============================================  -->

  <target name="-validate" hidden="true">
    <fail unless="project_title" message="Missing `project_title` in properties file!" />
    <fail unless="project_org" message="Missing `project_org` in properties file!" />
    <fail unless="project_slug" message="Missing `project_slug` in properties file!" />
    <fail unless="project_ns" message="Missing `project_ns` in properties file!" />
    <fail unless="project_sns" message="Missing `project_sns` in properties file!" />
    <fail unless="project_version" message="Missing `project_version` in properties file!" />

    <fail unless="project_php_required_version" message="Missing `project_php_required_version` in properties file!" />
    <fail unless="project_php_up_to_version" message="Missing `project_php_up_to_version` in properties file!" />

    <fail unless="project_wp_required_version" message="Missing `project_wp_required_version` in properties file!" />
    <fail unless="project_wp_up_to_version" message="Missing `project_wp_up_to_version` in properties file!" />
  </target>

  <!-- ============================================  -->
  <!-- Preamble. -->
  <!-- ============================================  -->

  <target name="-preamble" hidden="true">

    <echo msg="OS: ${os.name}" />
    <echo msg="Home: ${user.home}" />
    <echo msg="------------------------------------" />

    <echo msg="PHP Version: ${php.version}" />
    <echo msg="Phing Version: ${phing.version}" />
    <echo msg="------------------------------------" />

    <echo msg="Phing Title: ${phing.project.name}" />
    <echo msg="Project Title: ${project_title}" />
    <echo msg="Project Directory: ${project.basedir}" />
    <echo msg="------------------------------------" />

    <echo msg="Project Org.: ${project_org}" />
    <echo msg="Project Slug: ${project_slug}" />
    <echo msg="Project NS: ${project_ns}" />
    <echo msg="Project SNS: ${project_sns}" />
    <echo msg="------------------------------------" />

    <if>
      <and>
        <not>
          <isset property="is_lite_variation" />
        </not>
        <isset property="project_lite_title" />
        <istrue value="${project_lite_title}" />

        <isset property="project_lite_ns" />
        <istrue value="${project_lite_ns}" />

        <isset property="project_lite_sns" />
        <istrue value="${project_lite_sns}" />

        <isset property="project_lite_slug" />
        <istrue value="${project_lite_slug}" />
      </and>
      <then>
        <echo msg="Project Lite Title: ${project_lite_title}" />
        <echo msg="Project Lite Slug: ${project_lite_slug}" />
        <echo msg="Project Lite NS: ${project_lite_ns}" />
        <echo msg="Project Lite SNS: ${project_lite_sns}" />
        <echo msg="------------------------------------" />
      </then>
    </if>

    <echo msg="Project Version: ${project_version}" />
    <echo msg="Project PHP Required Version: ${project_php_required_version}" />
    <echo msg="Project PHP Tested Up To Version: ${project_php_up_to_version}" />
    <echo msg="Project WP Required Version: ${project_wp_required_version}" />
    <echo msg="Project WP Tested Up To Version: ${project_wp_up_to_version}" />
    <echo msg="------------------------------------" />

  </target>

  <!-- ============================================  -->
  <!-- Preparation. -->
  <!-- ============================================  -->

  <target name="-prepare" hidden="true">

    <echo msg="Preparing to build..." />
    <echo msg="------------------------------------" />

    <echo msg="Deleting previous: ${project.basedir}/.~build ..." />
    <delete dir="${project.basedir}/.~build" includeemptydirs="true" quiet="true" />
    <echo msg="------------------------------------" />

    <echo msg="Creating: ${project.basedir}/.~build ..." />
    <mkdir dir="${project.basedir}/.~build" />
    <echo msg="------------------------------------" />

  </target>

  <!-- ============================================  -->
  <!-- Token replacements. -->
  <!-- ============================================  -->

  <target name="-rtokens" hidden="true">

    <!-- WordPress theme/plugin replacements. -->

    <if>
      <and>
        <available file="${project.basedir}/readme.txt" />
      </and>
      <then>
        <echo msg="Replacing WP tokens in: ${project.basedir} ..." />
        <reflexive>
          <fileset dir="${project.basedir}" casesensitive="false">
            <include pattern="readme.txt" />
            <include pattern="plugin.php" />
            <include pattern="${project_slug}.php" />
            <include pattern="uninstall.php" />
            <include pattern="functions.php" />
            <include pattern="style.css" />
          </fileset>
          <filterchain>
            <replaceregexp>
              <regexp pattern="^Version\:.+$" replace="Version: ${project_version}" modifiers="m" />
              <regexp pattern="^Stable tag\:.+$" replace="Stable tag: ${project_version}" modifiers="m" />

              <regexp pattern="^Requires at least\:.+$" replace="Requires at least: ${project_wp_required_version}" modifiers="m" />
              <regexp pattern="^Tested up to\:.+$" replace="Tested up to: ${project_wp_up_to_version}" modifiers="m" />

              <regexp pattern="^Requires PHP\:.+$" replace="Requires PHP: ${project_php_required_version}" modifiers="m" />
              <regexp pattern="^Tested up to PHP\:.+$" replace="Tested up to PHP: ${project_php_up_to_version}" modifiers="m" />
            </replaceregexp>
          </filterchain>
        </reflexive>
        <echo msg="------------------------------------" />
      </then>
    </if>

    <!-- Other PHP/JS token replacements. -->

    <if>
      <and>
        <available resource="${project.basedir}" type="dir" />
      </and>
      <then>
        <echo msg="Replacing tokens in: ${project.basedir} ..." />
        <reflexive>
          <fileset dir="${project.basedir}" casesensitive="false">
            <exclude pattern="**/vendor/**" />
            <include pattern="*.php" />
            <include pattern="**/*.php" />
            <include pattern="*.js" />
            <include pattern="**/*.js" />
          </fileset>
          <filterchain>
            <replaceregexp>
              <regexp pattern="'[^']*?';\s*\/\/version\/\/$" replace="'${project_version}'; //version//" modifiers="m" />
              <regexp pattern='"[^"]*?";\s*\/\/version\/\/$' replace='"${project_version}"; //version//' modifiers="m" />

              <regexp pattern="'[^']*?';\s*\/\/php\-required\-version\/\/$" replace="'${project_php_required_version}'; //php-required-version//" modifiers="m" />
              <regexp pattern='"[^"]*?";\s*\/\/php\-required\-version\/\/$' replace='"${project_php_required_version}"; //php-required-version//' modifiers="m" />

              <regexp pattern="'[^']*?';\s*\/\/php\-up\-to\-version\/\/$" replace="'${project_php_up_to_version}'; //php-up-to-version//" modifiers="m" />
              <regexp pattern='"[^"]*?";\s*\/\/php\-up\-to\-version\/\/$' replace='"${project_php_up_to_version}"; //php-up-to-version//' modifiers="m" />

              <regexp pattern="'[^']*?';\s*\/\/wp\-required\-version\/\/$" replace="'${project_wp_required_version}'; //wp-required-version//" modifiers="m" />
              <regexp pattern='"[^"]*?";\s*\/\/wp\-required\-version\/\/$' replace='"${project_wp_required_version}"; //wp-required-version//' modifiers="m" />

              <regexp pattern="'[^']*?';\s*\/\/wp\-up\-to\-version\/\/$" replace="'${project_wp_up_to_version}'; //wp-up-to-version//" modifiers="m" />
              <regexp pattern='"[^"]*?";\s*\/\/wp\-up\-to\-version\/\/$' replace='"${project_wp_up_to_version}"; //wp-up-to-version//' modifiers="m" />
            </replaceregexp>
          </filterchain>
        </reflexive>
        <echo msg="------------------------------------" />
      </then>
    </if>

  </target>

  <!-- ============================================  -->
  <!-- Composer install routine. -->
  <!-- ============================================  -->

  <target name="-composer" hidden="true">

    <if>
      <and>
        <available file="${project.basedir}/composer.json" />
      </and>
      <then>
        <echo msg="Deleting previous: ${project.basedir}/src/vendor ..." />
        <delete dir="${project.basedir}/src/vendor" includeemptydirs="true" quiet="true" />
        <echo msg="------------------------------------" />

        <echo msg="Deleting previous: ${project.basedir}/composer.lock ..." />
        <delete file="${project.basedir}/composer.lock" quiet="true" />
        <echo msg="------------------------------------" />

        <echo msg="Running Composer..." />
        <exec executable="/usr/bin/env" dir="${project.basedir}" passthru="true" checkreturn="true">
          <arg value="composer" />
          <arg value="install" />
        </exec>
        <echo msg="------------------------------------" />
      </then>
    </if>

  </target>

  <!-- ============================================  -->
  <!-- Rebranding routines. -->
  <!-- ============================================  -->

  <target name="-rebrand" hidden="true">

    <!-- WebSharks Core. -->

    <if>
      <and>
        <available file="${project.basedir}/src/vendor/composer/autoload_psr4.php" />
        <available resource="${project.basedir}/src/vendor/websharks/core" type="dir" />
      </and>
      <then>
        <echo msg="Rebranding: ${project.basedir}/src/vendor/websharks/core ..." />

        <reflexive>
          <fileset dir="${project.basedir}/src/vendor/websharks/core" casesensitive="false">
            <include pattern="src/includes/classes/**.php" />
            <include pattern="src/includes/interfaces/**.php" />
            <include pattern="src/includes/traits/**.php" />
          </fileset>
          <filterchain>
            <replaceregexp>
              <regexp pattern="\b(namespace|use)\s+WebSharks\\Core(?:\\[^\\]+)?\\Classes\b" replace="\1 WebSharks\\Core\\${project_sns}\\Classes" />
              <regexp pattern="\b(namespace|use)\s+WebSharks\\Core(?:\\[^\\]+)?\\Interfaces\b" replace="\1 WebSharks\\Core\\${project_sns}\\Interfaces" />
              <regexp pattern="\b(namespace|use)\s+WebSharks\\Core(?:\\[^\\]+)?\\Traits\b" replace="\1 WebSharks\\Core\\${project_sns}\\Traits" />
            </replaceregexp>
          </filterchain>
        </reflexive>

        <reflexive>
          <fileset dir="${project.basedir}/src/vendor/composer" casesensitive="false">
            <include pattern="autoload_psr4.php" />
          </fileset>
          <filterchain>
            <replaceregexp>
              <regexp pattern="\bWebSharks\\\\Core(?:\\\\[^\\]+)?\\\\Classes\b" replace="WebSharks\\\\Core\\\\${project_sns}\\\\Classes" />
              <regexp pattern="\bWebSharks\\\\Core(?:\\\\[^\\]+)?\\\\Interfaces\b" replace="WebSharks\\\\Core\\\\${project_sns}\\\\Interfaces" />
              <regexp pattern="\bWebSharks\\\\Core(?:\\\\[^\\]+)?\\\\Traits\b" replace="WebSharks\\\\Core\\\\${project_sns}\\\\Traits" />
            </replaceregexp>
          </filterchain>
        </reflexive>

        <echo msg="------------------------------------" />
      </then>
    </if>

    <!-- WebSharks WP Core. -->

    <if>
      <and>
        <available file="${project.basedir}/src/vendor/composer/autoload_psr4.php" />
        <available resource="${project.basedir}/src/vendor/websharks/wp-core" type="dir" />
      </and>
      <then>
        <echo msg="Rebranding: ${project.basedir}/src/vendor/websharks/wp-core ..." />

        <reflexive>
          <fileset dir="${project.basedir}/src/vendor/websharks/wp-core" casesensitive="false">
            <include pattern="src/includes/classes/**.php" />
            <include pattern="src/includes/interfaces/**.php" />
            <include pattern="src/includes/traits/**.php" />
          </fileset>
          <filterchain>
            <replaceregexp>
              <regexp pattern="\b(namespace|use)\s+WebSharks\\WpCore(?:\\[^\\]+)?\\Classes\b" replace="\1 WebSharks\\WpCore\\${project_sns}\\Classes" />
              <regexp pattern="\b(namespace|use)\s+WebSharks\\WpCore(?:\\[^\\]+)?\\Interfaces\b" replace="\1 WebSharks\\WpCore\\${project_sns}\\Interfaces" />
              <regexp pattern="\b(namespace|use)\s+WebSharks\\WpCore(?:\\[^\\]+)?\\Traits\b" replace="\1 WebSharks\\WpCore\\${project_sns}\\Traits" />
            </replaceregexp>
          </filterchain>
        </reflexive>

        <reflexive>
          <fileset dir="${project.basedir}/src/vendor/composer" casesensitive="false">
            <include pattern="autoload_psr4.php" />
          </fileset>
          <filterchain>
            <replaceregexp>
              <regexp pattern="\bWebSharks\\\\WpCore(?:\\\\[^\\]+)?\\\\Classes\b" replace="WebSharks\\\\WpCore\\\\${project_sns}\\\\Classes" />
              <regexp pattern="\bWebSharks\\\\WpCore(?:\\\\[^\\]+)?\\\\Interfaces\b" replace="WebSharks\\\\WpCore\\\\${project_sns}\\\\Interfaces" />
              <regexp pattern="\bWebSharks\\\\WpCore(?:\\\\[^\\]+)?\\\\Traits\b" replace="WebSharks\\\\WpCore\\\\${project_sns}\\\\Traits" />
            </replaceregexp>
          </filterchain>
        </reflexive>

        <echo msg="------------------------------------" />
      </then>
    </if>

  </target>

  <!-- ============================================  -->
  <!-- POT translation files. -->
  <!-- ============================================  -->

  <target name="-pots" hidden="true">

    <!-- WordPress POT translation. -->
    <if>
      <and>
        <available resource="${project.basedir}/src/vendor/websharks/wp-i18n-tools" type="dir" />
      </and>
      <then>

        <!-- WordPress theme. -->

        <if>
          <and>
            <available file="${project.basedir}/readme.txt" />
            <available file="${project.basedir}/style.css" />
          </and>
          <then>
            <echo msg="Building POT translation file for WP theme: ${project.basedir} ..." />
            <exec executable="${project.basedir}/src/vendor/websharks/wp-i18n-tools/makepot.php" dir="${project.basedir}" passthru="true" checkreturn="true">
              <arg value="wp-theme" />
              <arg value="${project.basedir}" />
              <arg value="${project.basedir}/src/includes/translations/${project_slug}.pot" />
            </exec>
            <echo msg="------------------------------------" />
          </then>
        </if>

        <!-- WordPress plugin. -->

        <if>
          <and>
            <available file="${project.basedir}/readme.txt" />
            <available file="${project.basedir}/plugin.php" />
          </and>
          <then>
            <echo msg="Building POT translation file for WP plugin: ${project.basedir} ..." />
            <exec executable="${project.basedir}/src/vendor/websharks/wp-i18n-tools/makepot.php" dir="${project.basedir}" passthru="true" checkreturn="true">
              <arg value="wp-plugin" />
              <arg value="${project.basedir}" />
              <arg value="${project.basedir}/src/includes/translations/${project_slug}.pot" />
            </exec>
            <echo msg="------------------------------------" />
          </then>
        </if>

        <!-- Remove WP i18n Tools package now. -->

        <echo msg="Deleting: ${project.basedir}/src/vendor/websharks/wp-i18n-tools ..." />
        <delete dir="${project.basedir}/src/vendor/websharks/wp-i18n-tools" includeemptydirs="true" quiet="false" />
        <echo msg="------------------------------------" />
      </then>
    </if>

  </target>

  <!-- ============================================  -->
  <!-- Codex generation. -->
  <!-- ============================================  -->

  <target name="-apigen" hidden="true">

    <echo msg="Deleting previous: ${project.basedir}/.~build/codex ..." />
    <delete dir="${project.basedir}/.~build/codex" includeemptydirs="true" quiet="true" />
    <echo msg="------------------------------------" />

    <echo msg="Running ApiGen (i.e., building codex)..." />
    <exec executable="/usr/bin/env" dir="${project.basedir}" passthru="true" checkreturn="true">
      <arg value="apigen" />
      <arg value="generate" />

      <arg value="--source" />
      <arg value="${project.basedir}/src" />

      <arg value="--destination" />
      <arg value="${project.basedir}/.~build/codex" />

      <arg value="--title" />
      <arg value="${project_title}" />

      <arg value="--exclude" />
      <arg value="vendor" />

      <arg value="--download" />
      <arg value="--deprecated" />
      <arg value="--todo" />
      <arg value="--debug" />
    </exec>
    <echo msg="------------------------------------" />

  </target>

  <!-- ============================================  -->
  <!-- Package generation. -->
  <!-- ============================================  -->

  <target name="-packages" hidden="true">

    <!-- PHAR file generation. -->
    <if>
      <and>
        <available file="${project.basedir}/src/includes/phar-stub.php" />
        <available resource="${project.basedir}/src" type="dir" />
      </and>
      <then>
        <echo msg="Deleting previous: ${project.basedir}/.~build/${project_slug}.phar ..." />
        <delete file="${project.basedir}/.~build/${project_slug}.phar" quiet="true" />
        <echo msg="------------------------------------" />

        <echo msg="Creating PHAR file: ${project.basedir}/.~build/${project_slug}.phar" />
        <pharpackage basedir="${project.basedir}" stub="${project.basedir}/src/includes/phar-stub.php" destfile="${project.basedir}/.~build/${project_slug}.phar">
          <fileset refid="_phar_fileset" />
        </pharpackage>
        <echo msg="------------------------------------" />
      </then>
    </if>

    <!-- ZIP file generation. -->

    <echo msg="Deleting previous: ${project.basedir}/.~build/${project_slug}.zip ..." />
    <delete file="${project.basedir}/.~build/${project_slug}.zip" quiet="true" />
    <echo msg="------------------------------------" />

    <echo msg="Creating ZIP file: ${project.basedir}/.~build/${project_slug}.zip" />
    <zip basedir="${project.basedir}" prefix="${project_slug}/" includeemptydirs="false" destfile="${project.basedir}/.~build/${project_slug}.zip">
      <fileset refid="_zip_tgz_fileset" />
    </zip>
    <echo msg="------------------------------------" />

    <!-- TGZ file generation. -->

    <echo msg="Deleting previous: ${project.basedir}/.~build/${project_slug}.tar.gz ..." />
    <delete file="${project.basedir}/.~build/${project_slug}.tar.gz" quiet="true" />
    <echo msg="------------------------------------" />

    <echo msg="Creating TGZ file: ${project.basedir}/.~build/${project_slug}.tar.gz" />
    <tar basedir="${project.basedir}" prefix="${project_slug}/" includeemptydirs="false" destfile="${project.basedir}/.~build/${project_slug}.tar.gz" compression="gzip">
      <fileset refid="_zip_tgz_fileset" />
    </tar>
    <echo msg="------------------------------------" />

  </target>

  <!-- ============================================  -->
  <!-- Distro generation. -->
  <!-- ============================================  -->

  <target name="-distros" hidden="true">

    <unzip file="${project.basedir}/.~build/${project_slug}.zip" todir="${project.basedir}/.~build/${project_slug}" />

  </target>

  <!-- ============================================  -->
  <!-- Lite variation generation. -->
  <!-- ============================================  -->

  <target name="-lite-variation" hidden="true">

    <if>
      <and>
        <not>
          <isset property="is_lite_variation" />
        </not>
        <isset property="project_lite_title" />
        <istrue value="${project_lite_title}" />

        <isset property="project_lite_ns" />
        <istrue value="${project_lite_ns}" />

        <isset property="project_lite_sns" />
        <istrue value="${project_lite_sns}" />

        <isset property="project_lite_slug" />
        <istrue value="${project_lite_slug}" />
      </and>
      <then>
        <!-- Prepare for lite generation. -->

        <echo msg="Deleting previous: ${project.basedir}/.~build/${project_lite_slug} ..." />
        <delete dir="${project.basedir}/.~build/${project_lite_slug}" includeemptydirs="true" quiet="true" />
        <echo msg="------------------------------------" />

        <echo msg="Creating: ${project.basedir}/.~build/${project_lite_slug} ..." />
        <copy todir="${project.basedir}/.~build/${project_lite_slug}">
          <fileset dir="${project.basedir}">
            <exclude pattern=".~build/**" />
          </fileset>
        </copy>
        <echo msg="------------------------------------" />

        <!-- WordPress plugin slug file rename. -->

        <if>
          <and>
            <available file="${project.basedir}/.~build/${project_lite_slug}/readme.txt" />
            <available file="${project.basedir}/.~build/${project_lite_slug}/${project_slug}.php" />
          </and>
          <then>
            <echo msg="Renaming: ${project.basedir}/.~build/${project_lite_slug}/${project_slug}.php ..." />
            <move file="${project.basedir}/.~build/${project_lite_slug}/${project_slug}.php" tofile="${project.basedir}/.~build/${project_lite_slug}/${project_lite_slug}.php" />
            <echo msg="------------------------------------" />
          </then>
        </if>

        <!-- WordPress token replacements. -->

        <if>
          <and>
            <available file="${project.basedir}/.~build/${project_lite_slug}/readme.txt" />
          </and>
          <then>
            <echo msg="Replacing WP tokens in: ${project.basedir}/.~build/${project_lite_slug} ..." />
            <reflexive>
              <fileset dir="${project.basedir}/.~build/${project_lite_slug}" casesensitive="false">
                <include pattern="readme.txt" />
                <include pattern="plugin.php" />
                <include pattern="${project_lite_slug}.php" />
                <include pattern="uninstall.php" />
                <include pattern="functions.php" />
                <include pattern="style.css" />
              </fileset>
              <filterchain>
                <replaceregexp>
                  <regexp pattern="^\=\=\=.+?\=\=\=\n" replace="=== ${project_lite_title} ===${line.separator}" />
                  <regexp pattern="^Theme Name\:.+$" replace="Theme Name: ${project_lite_title}" modifiers="m" />
                  <regexp pattern="^Plugin Name\:.+$" replace="Plugin Name: ${project_lite_title}" modifiers="m" />
                </replaceregexp>
              </filterchain>
            </reflexive>
            <echo msg="------------------------------------" />
          </then>
        </if>

        <!-- Other token replacements. -->

        <echo msg="Replacing other tokens in: ${project.basedir}/.~build/${project_lite_slug} ..." />
        <reflexive>
          <fileset dir="${project.basedir}/.~build/${project_lite_slug}" casesensitive="false">
            <include pattern="readme.md" />
          </fileset>
          <filterchain>
            <replaceregexp>
              <regexp pattern="^##.+?\n" replace="## ${project_lite_title}${line.separator}" />
            </replaceregexp>
          </filterchain>
        </reflexive>
        <echo msg="------------------------------------" />

        <!-- Namespace replacements. -->

        <echo msg="Changing namespace in: ${project.basedir}/.~build/${project_lite_slug} ..." />
        <reflexive>
          <fileset dir="${project.basedir}/.~build/${project_lite_slug}" casesensitive="false">
            <exclude pattern="src/vendor/**" />
          </fileset>
          <filterchain>
            <replaceregexp>
              <regexp pattern="\b(namespace|use)\s+${project_ns}\b" replace="\1 ${project_lite_ns}" />
            </replaceregexp>
          </filterchain>
        </reflexive>
        <echo msg="------------------------------------" />

        <!-- Composer replacements. -->

        <echo msg="Modifying composer.json: ${project.basedir}/.~build/${project_lite_slug}/composer.json ..." />

        <php expression="addslashes(addslashes('${project_ns}'))" returnproperty="_project_ns_slashes" />
        <php expression="addslashes(addslashes('${project_lite_ns}'))" returnproperty="_project_lite_ns_slashes" />

        <reflexive>
          <fileset dir="${project.basedir}/.~build/${project_lite_slug}" casesensitive="false">
            <include pattern="composer.json" />
          </fileset>
          <filterchain>
            <replaceregexp>
              <regexp pattern="\b${project_slug}\b" replace="${project_lite_slug}" />
              <regexp pattern="&quot;${_project_ns_slashes}\\\\&quot;" replace="&quot;${_project_lite_ns_slashes}\\\\&quot;" />
            </replaceregexp>
          </filterchain>
        </reflexive>
        <echo msg="------------------------------------" />

        <!-- Strip pro tokens. -->

        <echo msg="Stripping pro tokens from: ${project.basedir}/.~build/${project_lite_slug} ..." />
        <reflexive>
          <fileset dir="${project.basedir}/.~build/${project_lite_slug}" casesensitive="false">
            <exclude pattern="src/vendor/**" />
          </fileset>
          <filterchain>
            <replaceregexp>
              <regexp pattern="\/\*\!\[pro strip\-from\=['&quot;]lite['&quot;]\]\*\/(?:.*?)\/\*\!\[\/pro\]\*\/" replace="" modifiers="s" />
              <regexp pattern="\/\*\[pro strip\-from\=['&quot;]lite['&quot;]\]\*\/(?:.*?)\/\*\[\/pro\]\*\/" replace="" modifiers="s" />
            </replaceregexp>
          </filterchain>
        </reflexive>
        <echo msg="------------------------------------" />

        <!-- Modify build properties. -->

        <echo msg="Modifying lite build properties: ${project.basedir}/.~build/${project_lite_slug}/.build.properties ..." />
        <reflexive>
          <fileset dir="${project.basedir}/.~build/${project_lite_slug}" casesensitive="false">
            <include pattern=".build.properties" />
          </fileset>
          <filterchain>
            <replaceregexp>
              <regexp pattern="^project_title\s+.*$" replace="" modifiers="m" />
              <regexp pattern="^project_slug\s+.*$" replace="" modifiers="m" />
              <regexp pattern="^project_ns\s+.*$" replace="" modifiers="m" />
              <regexp pattern="^project_sns\s+.*$" replace="" modifiers="m" />

              <regexp pattern="^project_lite_title(\s+)" replace="project_title\1" modifiers="m" />
              <regexp pattern="^project_lite_slug(\s+)" replace="project_slug\1" modifiers="m" />
              <regexp pattern="^project_lite_ns(\s+)" replace="project_ns\1" modifiers="m" />
              <regexp pattern="^project_lite_sns(\s+)" replace="project_sns\1" modifiers="m" />
            </replaceregexp>
          </filterchain>
        </reflexive>
        <echo msg="------------------------------------" />

        <!-- Build lite variation now. -->

        <echo msg="Building lite variation from: ${project.basedir}/.~build/${project_lite_slug}/.build.xml ..." />
        <phing phingfile="${project.basedir}/.~build/${project_lite_slug}/.build.xml" inheritall="false" inheritrefs="false" haltonfailure="true">
          <property name="is_lite_variation" value="true" />
        </phing>

      </then>
    </if>

  </target>

  <!-- ============================================  -->
  <!-- Push lite variation to GitHub repo. -->
  <!-- ============================================  -->

  <target name="-push-lite-variation" hidden="true">

    <!-- Prepare for lite generation. -->

    <property name="_repo_dir" value="${project.basedir}/.~build/${project_lite_slug}/.~build/${project_lite_slug}-git-repo"/>
    <property name="_repo_remote_path" value="git@github.com:${project_org}/${project_lite_slug}.git"/>

    <echo msg="Preparing to push ${project_lite_title} to ${_repo_remote_path} ..." />
    <echo msg="------------------------------------" />

    <delete dir="${_repo_dir}" includeemptydirs="true" quiet="true" />

    <!-- Clone repository. -->

    <echo msg="Cloning the existing remote repo (be patient, this may take awhile) ..." />

    <gitclone repository="${_repo_remote_path}" targetPath="${_repo_dir}" />

    <!-- Switch to "000000-dev" branch. -->

    <gitcheckout repository="${_repo_dir}" branchname="000000-dev" />

    <!-- Delete all existing files in repo. -->

    <delete includeemptydirs="true" quiet="true">
      <fileset dir="_repo_dir" />
    </delete>

    <!-- Copy generated Lite variation to repo. -->

    <copy todir="${_repo_dir}">
      <fileset dir="${project.basedir}/.~build/${project_lite_slug}">
        <exclude pattern=".~build/**" />
      </fileset>
    </copy>

    <echo msg="Staging changed files ..." />

    <exec command="git add --all *" dir="${_repo_dir}" />
    <exec command="git status" dir="${_repo_dir}" passthru="true" />

    <echo msg="------------------------------------" />
    <echo msg="To make changes or commit these files manually, choose 'no' at the next prompt and visit ${_repo_dir}" />
    <echo msg="------------------------------------" />

    <!-- Commit changes. -->

    <propertyprompt propertyName="_commit_to_repo" defaultValue="no" promptText="Commit these changes? (yes/no)" />

    <if>
      <equals arg1="${_commit_to_repo}" arg2="yes" trim="yes" />
      <then>

        <echo msg="Generating commit message from changelog ..." />

        <!-- Extract changelog for latest version, write to .~commit.msg, then trim last two lines. -->
        <if>
          <available property="_changelog_exists" file="${project.basedir}/.~build/${project_lite_slug}/CHANGELOG.md" />
          <then>
            <loadfile property="_changelog" file="${project.basedir}/.~build/${project_lite_slug}/CHANGELOG.md"/>
            <if>
              <contains string="${_changelog}" substring="v${project_version}" />
              <then>
                <exec command="sed -n -e '/^=\sv{project_version}\s=$/,/^=.*$/w .~commit.msg' CHANGELOG.md" dir="${_repo_dir}" passthru="true" />
                <exec command="sed -i -e '$d' .~commit.msg; sed -i -e '$d' .~commit.msg" dir="${_repo_dir}" passthru="true" />

                <exec command="cat .~commit.msg" dir="${_repo_dir}" passthru="true" />

                <echo msg="Committing changes ..." />
                <exec command="git commit -F .~commit.msg" dir="${_repo_dir}" passthru="true" /> <!-- GitCommitTask doesn't support the -F git option. -->
                <property name="_commit_passed" value="true" />
              </then>
              <else>
                <property name="_commit_passed" value="false" />
                <echo level="error" msg="Unable to commit: Changelog entry for v${project_version} not found." />
              </else>
            </if>
          </then>
          <else>
            <property name="_commit_passed" value="false" />
            <echo level="error" msg="Unable to commit: CHANGELOG.md file missing." />
          </else>
        </if>

        <!-- Push previous commit to remote repo -->

        <if>
          <istrue value="${_commit_passed}" />
          <then>
            <propertyprompt propertyName="_push_to_repo" defaultValue="no" promptText="Push commit to remote repo? (yes/no)" />
            <if>
              <equals arg1="${_push_to_repo}" arg2="yes" trim="yes" />
              <then>
                <gitpush repository="${_repo_dir}" />
              </then>
            </if>
          </then>
        </if>

      </then>
    </if>

  </target>

  <!-- ============================================  -->
  <!-- Default/visible build target. -->
  <!-- ============================================  -->

  <target name="build" depends="-validate,-preamble,-prepare,-rtokens,-composer,-rebrand,-pots,-packages,-distros,-lite-variation">

    <echo msg="Build complete! :-)" />

  </target>

  <target name="release" depends="-push-lite-variation">

    <echo msg="Release complete! :-)" />

  </target>


</project>
